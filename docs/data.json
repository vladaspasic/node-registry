{
    "project": {
        "name": "Node Registry",
        "description": "Node Registry API: lightweight IoC for Node applications",
        "url": "https://github.com/vladaspasic/node-registry/",
        "version": "0.1.7"
    },
    "files": {
        "lib/registry/container.js": {
            "name": "lib/registry/container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/registry/holder.js": {
            "name": "lib/registry/holder.js",
            "modules": {},
            "classes": {
                "Holder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/registry/loader.js": {
            "name": "lib/registry/loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/registry/registry.js": {
            "name": "lib/registry/registry.js",
            "modules": {},
            "classes": {
                "Registry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/dag.js": {
            "name": "lib/dag.js",
            "modules": {},
            "classes": {
                "DAG": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/event-emitter.js": {
            "name": "lib/event-emitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {
                "Registry": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/module.js": {
            "name": "lib/module.js",
            "modules": {},
            "classes": {
                "Module": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/object.js": {
            "name": "lib/object.js",
            "modules": {},
            "classes": {
                "Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/ordered-configuration.js": {
            "name": "lib/ordered-configuration.js",
            "modules": {},
            "classes": {
                "OrederedConfiguration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/request.js": {
            "name": "lib/request.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/server.js": {
            "name": "lib/server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/shutdown.js": {
            "name": "lib/shutdown.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/utils.js": {
            "name": "lib/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Registry": {
            "name": "Registry",
            "submodules": {},
            "classes": {
                "Container": 1,
                "Holder": 1,
                "Registry": 1,
                "DAG": 1,
                "EventEmitter": 1,
                "Module": 1,
                "Object": 1,
                "OrederedConfiguration": 1,
                "Server": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/server.js",
            "line": 41,
            "description": "Node Registry Module"
        }
    },
    "classes": {
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "file": "lib/registry/container.js",
            "line": 8,
            "description": "Container which contains all the {{#crossLink \"Module\"}}{{/crossLink}} factories.\n\nHandles the injections of the dependencies for each {{#crossLink \"Module\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "The parent Container",
                    "type": "Container"
                }
            ]
        },
        "Holder": {
            "name": "Holder",
            "shortname": "Holder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "file": "lib/registry/holder.js",
            "line": 4,
            "description": "A simple implementation of the HashMap, which can have\na parent object from where it can also access values.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "Holder"
                }
            ]
        },
        "Registry": {
            "name": "Registry",
            "shortname": "Registry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "file": "lib/registry/registry.js",
            "line": 19,
            "description": "Registry Class which is a singleton.",
            "extends": "{EventEmitter}"
        },
        "DAG": {
            "name": "DAG",
            "shortname": "DAG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "file": "lib/dag.js",
            "line": 4,
            "description": "DAG stands for Directed acyclic graph.\nIt is used to build a graph of dependencies checking that there isn't circular\ndependencies. p.e Registering initializers with a certain precedence order.",
            "is_constructor": 1
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "file": "lib/event-emitter.js",
            "line": 43,
            "description": "Event Emitter class that has support for triggering\nand listening Events.",
            "extends": "Object"
        },
        "Module": {
            "name": "Module",
            "shortname": "Module",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "namespace": "",
            "file": "lib/module.js",
            "line": 7,
            "description": "Building block for the Registry IoC.",
            "extends": "EventEmitter"
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "namespace": "",
            "file": "lib/object.js",
            "line": 4,
            "description": "Base Object Class for all classes inside the Node Registry."
        },
        "OrederedConfiguration": {
            "name": "OrederedConfiguration",
            "shortname": "OrederedConfiguration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "namespace": "",
            "file": "lib/ordered-configuration.js",
            "line": 7,
            "description": "OrederedConfiguration class used to add and\nrun a specific task in a ordered",
            "is_constructor": 1
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Registry",
            "namespace": "",
            "file": "lib/server.js",
            "line": 41,
            "description": "Server Module Class that is wrapped aroung Node HTTP and HTPPS servers.",
            "extends": "{EventEmitter}"
        }
    },
    "classitems": [
        {
            "file": "lib/registry/container.js",
            "line": 32,
            "itemtype": "property",
            "name": "parent",
            "type": "Container",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 39,
            "itemtype": "property",
            "name": "registrations",
            "type": "Holder",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 46,
            "itemtype": "property",
            "name": "cache",
            "type": "Holder",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 53,
            "itemtype": "property",
            "name": "injections",
            "type": "Object",
            "default": "null",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 60,
            "itemtype": "property",
            "name": "_options",
            "type": "Holder",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 68,
            "description": "Registers a factory for later injection.\n\nExample:\n```javascript\ncontainer.register('User', UserModule);\ncontainer.register('email', Email, {singleton: true});\n```",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the Module",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "Instance or a value for this Module",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "Configuration telling the Container how to build a Module",
                    "type": "Object"
                }
            ],
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 99,
            "description": "Unregisters a module",
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 115,
            "description": "Checks if the module is already registered.",
            "itemtype": "method",
            "name": "isRegistered",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 128,
            "description": "Resolves the factory for the registration.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Function"
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 149,
            "description": "Returns a module instance for the name.\nThe default behaviour is for lookup to return a singleton instance.\nWhich will always have the same value. If you wish to return a fresh\nmodule instance, pass 'singleton': false option.",
            "itemtype": "method",
            "name": "lookup",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Function"
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 184,
            "description": "Return the corresponding factory for the module name.",
            "itemtype": "method",
            "name": "lookupFactory",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Function"
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 224,
            "description": "Define injections for a certain module. These injections\nwill be applied when Modules are instantiated.\n\n```javascript\ncontainer.register('user', User);\ncontainer.register('email', Email);\ncontainer.inject('email', 'user', 'user');\n```\nor\n\n```javascript\ncontainer.register('user', User);\ncontainer.inject('email', 'user', 'user');\ncontainer.register('email', Email);\n```\n\nWhen performing injections, please notice that the injected value must be declared before\nthe injection is declared and the target module is not alreay looked up.",
            "itemtype": "method",
            "name": "injection",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 270,
            "description": "Creates a new child Container. These children are configured\nto correctly inherit from the current container.",
            "itemtype": "method",
            "name": "child",
            "return": {
                "description": "",
                "type": "Container"
            },
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 283,
            "description": "Destroys the container and all its managed objects.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Container"
        },
        {
            "file": "lib/registry/container.js",
            "line": 297,
            "description": "Clear the cache for the container",
            "itemtype": "method",
            "name": "reset",
            "class": "Container"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 19,
            "itemtype": "property",
            "name": "parent",
            "type": "{Holder}",
            "default": "null",
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 26,
            "description": "Object used to store the current nodes data.",
            "itemtype": "property",
            "name": "data",
            "type": "Object",
            "default": "null",
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 35,
            "description": "Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object a value or undefined if not found"
            },
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 56,
            "description": "Set the given value for the given key, at the current level.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 67,
            "description": "Delete the given key",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 77,
            "description": "Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Holder"
        },
        {
            "file": "lib/registry/holder.js",
            "line": 100,
            "description": "Iterate and invoke a callback for each local key-value pair.",
            "itemtype": "method",
            "name": "eachLocal",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Holder"
        },
        {
            "file": "lib/registry/loader.js",
            "line": 8,
            "description": "Scans the directory in search of Modules. It returns an Array of\nfactories for the Container.",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Registry"
                },
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Registry"
        },
        {
            "file": "lib/registry/loader.js",
            "line": 34,
            "description": "Find the initializer.js file in the folder location. If it exists\nregister it.",
            "params": [
                {
                    "name": "registry",
                    "description": "",
                    "type": "Registry"
                },
                {
                    "name": "folder",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/loader.js",
            "line": 52,
            "description": "Requires the location and creates a Module Factory, by extending the\nprototype with the properties obtained from the file.",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Module"
            },
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 43,
            "description": "Get the {{#crossLink \"Module\"}}{{/crossLink}} instance, that has\nbeen registered inside the {{#crossLink \"Container\"}}{{/crossLink}}.\n\n```javascript\nvar MyModule = Registry.registerFolder('myModule');\n\nMyModule.method();\n```\n\nIf the {{#crossLink \"Module\"}}{{/crossLink}} does not exist,\nan Error will be raised.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Module"
            },
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 65,
            "description": "Registers the folder, which contains the Modules, in the container.\n\n```javascript\nRegistry.registerFolder('modules/folder');\n```\n\nRegistry will scan the folder, and load each folder inside it to\ncreate a {{#crossLink \"Module\"}}{{/crossLink}}.\n\nIf an `initializer.js` file is located inside the module folder,\nit will be automatically picked up and registered.",
            "itemtype": "method",
            "name": "registerFolder",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 86,
            "description": "Registers the Module to the container.\nIf the module param is a string, it will require the module and extend the\nModule class. If the module is a Function or an Object it will register it for that name.\n\n```javascript\nRegistry.registerModule('myModule', { \n   method: function() {\n      // your logic\n   }\n});\n```\n You can also pass a location where to module is located.\n\n```javascript\nRegistry.registerModule('myModule', 'path/to/my/module');\n```\n\nOr you can directly extend the {{#crossLink \"Module\"}}{{/crossLink}} class,\nand pass it in the function.\n\n```javascript\nRegistry.registerModule('myModule', Registry.Module.extend{ \n   method: function() {\n      // your logic\n   }\n});\n```",
            "itemtype": "method",
            "name": "registerModule",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "module",
                    "description": "",
                    "type": "String|Object|Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 138,
            "description": "Register an initializer function that will be invoked before\nthe server is started.\n\n```javascript\nRegistry.registerInitializer({ \n   name: 'myInitializer',\n   initializer: function(container, server, callback) {\n      // your logic\n  });\n```\n\nWhen creating an initializer, `name` and `initializer` properties,\nare required.",
            "itemtype": "method",
            "name": "registerInitializer",
            "params": [
                {
                    "name": "initializer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 170,
            "description": "Run the configured initalizers. After all of them are invoked,\nstart up the server.\n\nYou must pass a callback that will be run after initializers are finished.",
            "itemtype": "method",
            "name": "runInitializers",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 203,
            "description": "Creates the Server Module. You will extend the {{#crossLink \"Server\"}}{{/crossLink}}\nmodule with new methods.\n\n```javascript\nvar Server = Registry.createServer(function(req, res) {\n    res.write('ok');\n});\n\nServer.start();\n```\n\n```javascript\nvar Server = Registry.createServer({\n   port: 8080,\n   listener: function(req, res) {\n      res.write('ok');\n   }\n});\n\nServer.start();\n```\n\nIf the server is already created, this method will raise an Error, as there can\nonly be one instance of the {{#crossLink \"Server\"}}{{/crossLink}} registered in the\nContainer.",
            "itemtype": "method",
            "name": "createServer",
            "params": [
                {
                    "name": "app",
                    "description": "",
                    "type": "Object|Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Server"
            },
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 269,
            "description": "Load more Environment properties to the Registry.\n\n```javascript\nRegistry.readEnv('/location/to/folder/containing/envfile')\n```\n\nTo not raise errors when reading the `.env` file, set `raise`\nproperty to `false`.\n\n```javascript\nRegistry.readEnv('/location/to/folder/containing/envfile', {\n   raise: false\n})\n```\n\nFor more options, visit https://www.npmjs.org/package/node-env-file",
            "itemtype": "method",
            "name": "readEnv",
            "params": [
                {
                    "name": "location",
                    "description": "Where the `env` file is located",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 295,
            "description": "Get the execution mode of the applcation by checking if the executionMode\nproperty is set. If not it checks the environment variables by \n`process.env.NODE_ENV` property.\n\nDefaults to 'development'.",
            "itemtype": "method",
            "name": "getExecutionMode",
            "return": {
                "description": "LogicalExpression"
            },
            "default": "development",
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 313,
            "description": "Manualy set the execution mode in the Regsitry\n\n```javascript\nRegistry.setExecutionMode('production');\n```",
            "itemtype": "method",
            "name": "setExecutionMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 331,
            "description": "Detects if the application is runing in production mode",
            "itemtype": "method",
            "name": "isProductionMode",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 341,
            "description": "Resets the Container, and emits a 'reset' Event.",
            "itemtype": "method",
            "name": "reset",
            "access": "private",
            "tagname": "",
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 352,
            "description": "Event emited each time the Registry has been reset.",
            "itemtype": "event",
            "name": "reset",
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 360,
            "description": "Destroys the registry. This will close the server if it's runnig,\nand destroy the Container.\nUltimatly this method will exit the current process.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 373,
            "description": "You are able to access all Environment properties via this property.\n\n```javascript\nRegistry.environment.get('KEY');\n```",
            "type": "{Holder}",
            "class": "Registry"
        },
        {
            "file": "lib/registry/registry.js",
            "line": 385,
            "description": "Get the Sinlgeton Registry instance.",
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "opts",
                    "description": ""
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Registry"
            },
            "class": "Registry"
        },
        {
            "file": "lib/dag.js",
            "line": 17,
            "description": "Adds a vertex entry to the graph unless it is already added.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex to add",
                    "type": "String"
                }
            ],
            "return": {
                "description": "vertex"
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 43,
            "description": "Adds a vertex to the graph and sets its value.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to put in the vertex."
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 55,
            "description": "Connects the vertices with the given names, adding them to the graph if\nnecesary, only if this does not produce is any circular dependency.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "addEdge",
            "params": [
                {
                    "name": "fromName",
                    "description": "The name the vertex where the edge starts.",
                    "type": "String"
                },
                {
                    "name": "toName",
                    "description": "The name the vertex where the edge ends.",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 74,
            "description": "Description",
            "itemtype": "method",
            "name": "checkCycle",
            "params": [
                {
                    "name": "vertex",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 92,
            "description": "Visits all the vertex of the graph calling the given function with each one,\nensuring that the vertices are visited respecting their precedence.",
            "itemtype": "method",
            "name": "topsort",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to be invoked on each vertex.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 114,
            "description": "Adds a vertex with the given name and value to the graph and joins it with the\nvertices referenced in _before_ and _after_. If there isn't vertices with those\nnames, they are added too.\nIf either _before_ or _after_ are falsy/empty, the added vertex will not have\nan incoming/outgoing edge.\n                     which this vertex must be visited.\n                     which this vertex must be visited.",
            "itemtype": "method",
            "name": "addEdges",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the vertex to be added.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of that vertex."
                },
                {
                    "name": "before",
                    "description": "An string or array of strings with the names of the vertices before"
                },
                {
                    "name": "after",
                    "description": "An string or array of strings with the names of the vertex after"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/dag.js",
            "line": 152,
            "description": "Description",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "vertex",
                    "description": ""
                },
                {
                    "name": "fn",
                    "description": ""
                },
                {
                    "name": "visited",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DAG"
        },
        {
            "file": "lib/event-emitter.js",
            "line": 7,
            "description": "Initialize the EventEmitter Prototype",
            "itemtype": "method",
            "name": "init",
            "class": "EventEmitter"
        },
        {
            "file": "lib/event-emitter.js",
            "line": 21,
            "description": "Removes the assigned Event listeners from this\ninstance.",
            "itemtype": "method",
            "name": "destroy",
            "class": "EventEmitter"
        },
        {
            "file": "lib/event-emitter.js",
            "line": 32,
            "description": "Fired when this instance is destroyed",
            "itemtype": "event",
            "name": "destroy",
            "params": [
                {
                    "name": "this",
                    "description": "instance value",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "lib/module.js",
            "line": 15,
            "description": "Returns the requirements for this module.\nThese requirements are injected into the module when\nit is being constructed by the registry.",
            "itemtype": "method",
            "name": "getRequirements",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Module",
            "module": "Registry"
        },
        {
            "file": "lib/module.js",
            "line": 35,
            "description": "Returns the Module name",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Module",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 118,
            "description": "Initializer function for each class, invoked by the CoreObject constructor.",
            "itemtype": "method",
            "name": "init",
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 127,
            "description": "Extends the current instance with an another object",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a new extended Object",
                "type": "Object"
            },
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 138,
            "description": "Destroy the Object",
            "itemtype": "method",
            "name": "destroy",
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 149,
            "description": "To string represenatation of the class",
            "static": 1,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 160,
            "description": "Creates a new instance of the class",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "Defines new properties on the newly created object",
                    "type": "Object"
                },
                {
                    "name": "statics",
                    "description": "Defines read only values for the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a new Object Class function",
                "type": "Function"
            },
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/object.js",
            "line": 187,
            "description": "Extends the class prototype",
            "itemtype": "method",
            "name": "reopen",
            "static": 1,
            "params": [
                {
                    "name": "protoProps",
                    "description": "new properties for the prototype",
                    "type": "Object"
                }
            ],
            "class": "Object",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 18,
            "description": "Orders the configuration using Directed acyclic graph",
            "itemtype": "method",
            "name": "order",
            "return": {
                "description": "an ordered Array of the Configuration",
                "type": "Array"
            },
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 40,
            "description": "Iterates for each ordered registration in the OrderedConfiguraion,\nand runs a callback function with a given binding context.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function that is invoked for each iteration",
                    "type": "Function"
                },
                {
                    "name": "ctx",
                    "description": "Context for the iterator fn",
                    "type": "Object"
                }
            ],
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 51,
            "description": "Maps ordered registration in the OrderedConfiguraion,\nand runs a callback function with a given binding context.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fn",
                    "description": "Function that is invoked for each iteration",
                    "type": "Function"
                },
                {
                    "name": "ctx",
                    "description": "Context for the iterator fn",
                    "type": "Object"
                }
            ],
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 62,
            "description": "Get the configuration Object by its name, or undefined if it is not found",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "configuration",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the Configuration for the given name",
                "type": "Object"
            },
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 76,
            "description": "Register a configuration object to be run",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "configuration",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 99,
            "description": "Overrides the specific configuration",
            "itemtype": "method",
            "name": "override",
            "params": [
                {
                    "name": "configuration",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 115,
            "description": "Checks if the configuration exists",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "configuration",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/ordered-configuration.js",
            "line": 131,
            "description": "Removes the specific configuration",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "configuration",
                    "description": ""
                }
            ],
            "class": "OrederedConfiguration",
            "module": "Registry"
        },
        {
            "file": "lib/request.js",
            "line": 6,
            "description": "Sets the child container of the Registry.\n\nThis way it is separated from the main registry container,\nbut it can still access all the modules from it.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Container"
                }
            ],
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/request.js",
            "line": 27,
            "description": "Destroys the container, clearing all modules that where\nlooked up for this request.",
            "access": "private",
            "tagname": "",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/request.js",
            "line": 42,
            "description": "Register a factory that will be only accessible to this request.",
            "params": [
                {
                    "name": "name",
                    "description": ""
                },
                {
                    "name": "factory",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/request.js",
            "line": 58,
            "description": "Define injections for a certain module. These injections\nwill be applied to factories only in this request.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/request.js",
            "line": 75,
            "description": "Runs a lookup in the container, finding the module by that name.",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "CallExpression"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 29,
            "description": "Detects if the configuration contains the key and the SSL Certificate used to create a HTTPS server. <br/>\nIf no SSL configuration is provided, false is returned.",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 62,
            "description": "Set the port number for the Server",
            "type": "{Number}",
            "default": "8000",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 70,
            "description": "Here you declare your SSL `key` and `cert` file location\nto read by the Server when a HTTPS server is created.\n\nWhen this property is set, the port is automatically set to `443`.",
            "type": "{Object}",
            "default": "null",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 81,
            "description": "Get the module instance",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Module"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 93,
            "description": "The request listener function that should be added\nto the server when it's created.",
            "itemtype": "method",
            "name": "getListener",
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 106,
            "description": "Set the request listener function that should be added\nto the server.",
            "itemtype": "method",
            "name": "setListener",
            "params": [
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 119,
            "description": "Returns the port number to be used by the Server.\nIf SSL parameters are configured, it will use the 443 port.",
            "itemtype": "method",
            "name": "getPort",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 134,
            "description": "Returns the SSL confugration for the HTTPS server",
            "itemtype": "method",
            "name": "getSSL",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 144,
            "description": "Register an initializer function that will be invoked before\nthe server is started.",
            "itemtype": "method",
            "name": "registerInitializer",
            "params": [
                {
                    "name": "initializer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 155,
            "description": "Creates a HTTP server instance.\nIf SSL is configured, it creates a HTTPS server instance.",
            "itemtype": "method",
            "name": "createServer",
            "return": {
                "description": "Server Node.js Server instance"
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 183,
            "description": "Runs the initializers and starts up the server, if\nthey are all initialized.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to be invoked after the server is started",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 208,
            "description": "Starts the server by listening to the defined port",
            "itemtype": "method",
            "name": "startServer",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback to be invoked after the server is started",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 234,
            "description": "Stops the server",
            "itemtype": "method",
            "name": "stopServer",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 248,
            "description": "Method to be invoked before the server is loaded",
            "itemtype": "method",
            "name": "beforeServerStart",
            "params": [
                {
                    "name": "server",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 259,
            "description": "Method to be invoked after the server is started",
            "itemtype": "method",
            "name": "afterServerStart",
            "params": [
                {
                    "name": "server",
                    "description": ""
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/server.js",
            "line": 270,
            "description": "Destroy hook, shutdowns the server",
            "itemtype": "method",
            "name": "destroy",
            "class": "Server",
            "module": "Registry"
        },
        {
            "file": "lib/shutdown.js",
            "line": 6,
            "description": "Shutdown event listener that shutdowns the registry, emitting\nthe 'shutdown' event. \nEach module listens to the 'shutdown' event, and when it is emited\nmodule will invoke its 'onShudown' hook.",
            "params": [
                {
                    "name": "Registry",
                    "description": "Registry instance",
                    "type": "Registry"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "",
            "module": "Registry"
        },
        {
            "file": "lib/shutdown.js",
            "line": 34,
            "description": "Assign listeners for each process kill event to trigger\nmodule teardown process.",
            "params": [
                {
                    "name": "Registry",
                    "description": "Registry instance",
                    "type": "Registry"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "",
            "module": "Registry"
        },
        {
            "file": "lib/utils.js",
            "line": 5,
            "description": "Defines a static, non writable properties for each object,\nusing the Object.defineProperty method.",
            "params": [
                {
                    "name": "source",
                    "description": "Object which will have the property",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "name of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of the property",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options for defining the property",
                    "type": "Object"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "",
            "module": "Registry"
        },
        {
            "file": "lib/utils.js",
            "line": 24,
            "description": "Gets the value of a property on an object. If the property is a function,\nthe function will be invoked with no arguments, as it is being considered\nto be a getter function.\nIf the property/function is not defined `null` will be returned.",
            "params": [
                {
                    "name": "root",
                    "description": "The object to retrieve from.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "LogicalExpression"
            },
            "class": "",
            "module": "Registry"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nScans the directory in search of Modules. It returns an Array of\nfactories for the Container.",
            "line": " lib/registry/loader.js:8"
        },
        {
            "message": "Missing item type\nFind the initializer.js file in the folder location. If it exists\nregister it.",
            "line": " lib/registry/loader.js:34"
        },
        {
            "message": "Missing item type\nRequires the location and creates a Module Factory, by extending the\nprototype with the properties obtained from the file.",
            "line": " lib/registry/loader.js:52"
        },
        {
            "message": "Missing item type\nYou are able to access all Environment properties via this property.\n\n```javascript\nRegistry.environment.get('KEY');\n```",
            "line": " lib/registry/registry.js:373"
        },
        {
            "message": "Missing item type\nSets the child container of the Registry.\n\nThis way it is separated from the main registry container,\nbut it can still access all the modules from it.",
            "line": " lib/request.js:6"
        },
        {
            "message": "Missing item type\nDestroys the container, clearing all modules that where\nlooked up for this request.",
            "line": " lib/request.js:27"
        },
        {
            "message": "Missing item type\nRegister a factory that will be only accessible to this request.",
            "line": " lib/request.js:42"
        },
        {
            "message": "Missing item type\nDefine injections for a certain module. These injections\nwill be applied to factories only in this request.",
            "line": " lib/request.js:58"
        },
        {
            "message": "Missing item type\nRuns a lookup in the container, finding the module by that name.",
            "line": " lib/request.js:75"
        },
        {
            "message": "Missing item type\nDetects if the configuration contains the key and the SSL Certificate used to create a HTTPS server. <br/>\nIf no SSL configuration is provided, false is returned.",
            "line": " lib/server.js:29"
        },
        {
            "message": "Missing item type\nSet the port number for the Server",
            "line": " lib/server.js:62"
        },
        {
            "message": "Missing item type\nHere you declare your SSL `key` and `cert` file location\nto read by the Server when a HTTPS server is created.\n\nWhen this property is set, the port is automatically set to `443`.",
            "line": " lib/server.js:70"
        },
        {
            "message": "Missing item type\nShutdown event listener that shutdowns the registry, emitting\nthe 'shutdown' event. \nEach module listens to the 'shutdown' event, and when it is emited\nmodule will invoke its 'onShudown' hook.",
            "line": " lib/shutdown.js:6"
        },
        {
            "message": "Missing item type\nAssign listeners for each process kill event to trigger\nmodule teardown process.",
            "line": " lib/shutdown.js:34"
        },
        {
            "message": "Missing item type\nDefines a static, non writable properties for each object,\nusing the Object.defineProperty method.",
            "line": " lib/utils.js:5"
        },
        {
            "message": "Missing item type\nGets the value of a property on an object. If the property is a function,\nthe function will be invoked with no arguments, as it is being considered\nto be a getter function.\nIf the property/function is not defined `null` will be returned.",
            "line": " lib/utils.js:24"
        }
    ]
}